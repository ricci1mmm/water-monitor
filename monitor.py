import os
import time
import logging
import sqlite3
import threading
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import telebot
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('water_monitor.log')
    ]
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
BOT_TOKEN = os.getenv('BOT_TOKEN')
BASE_URL = 'https://my.alivewater.cloud/'
LOGIN = os.getenv('LOGIN')
PASSWORD = os.getenv('PASSWORD')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '')

if not all([BOT_TOKEN, LOGIN, PASSWORD]) or ':' not in BOT_TOKEN:
    logging.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN, LOGIN –∏ PASSWORD")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')

class WaterMonitor:
    def __init__(self):
        self.driver = self.setup_driver()
        self.last_sale = None

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChromeDriver"""
        try:
            options = Options()
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--headless=new')
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-blink-features=AutomationControlled')
            
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=options)
            driver.set_page_load_timeout(30)
            return driver
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            raise

    def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        for attempt in range(3):
            try:
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ #{attempt + 1}")
                self.driver.get(urljoin(BASE_URL, 'login'))
                time.sleep(3)

                # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
                try:
                    WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "div.ant-modal-content"))
                    ).find_element(By.CSS_SELECTOR, "button.ant-modal-close").click()
                    logging.info("–ó–∞–∫—Ä—ã—Ç–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ")
                    time.sleep(1)
                except:
                    pass

                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                self.driver.execute_script("window.scrollTo(0, 300)")
                time.sleep(1)

                # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
                login_field = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "input[name='login']"))
                )
                login_field.clear()
                for ch in LOGIN:
                    login_field.send_keys(ch)
                    time.sleep(0.1)

                password_field = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "input[name='password']"))
                )
                password_field.clear()
                for ch in PASSWORD:
                    password_field.send_keys(ch)
                    time.sleep(0.1)

                # –ö–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
                submit_button = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "button[type='submit']"))
                )
                self.driver.execute_script("arguments[0].click();", submit_button)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                WebDriverWait(self.driver, 15).until(
                    lambda d: "dashboard" in d.current_url.lower() or 
                            any(text in d.page_source.lower() for text in ["–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "welcome"])
                )
                logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True

            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)[:200]}")
                if attempt < 2:
                    time.sleep(5)
                    try:
                        self.driver.refresh()
                    except:
                        self.driver = self.setup_driver()
        
        logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False

    def check_sales(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂"""
        try:
            if not self.login():
                self.send_admin_alert("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ")
                return

            self.driver.get(urljoin(BASE_URL, 'sales'))
            WebDriverWait(self.driver, 20).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "table._table_1s08q_1"))
            )

            rows = self.driver.find_elements(By.CSS_SELECTOR, "table._table_1s08q_1 tbody tr")
            if not rows:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
                return

            first_row = rows[0]
            cells = first_row.find_elements(By.TAG_NAME, "td")
            if len(cells) >= 6:
                sale_data = {
                    'number': cells[0].text.strip(),
                    'address': cells[1].text.strip(),
                    'time': cells[2].text.strip(),
                    'liters': cells[3].text.strip(),
                    'total': cells[4].text.strip(),
                    'payment': self.get_payment_type(cells[5])
                }

                if not self.last_sale or sale_data['number'] != self.last_sale['number']:
                    self.last_sale = sale_data
                    self.send_notification(
                        f"üí∞ <b>–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ #{sale_data['number']}</b>\n"
                        f"üè† {sale_data['address']}\n"
                        f"‚è∞ {sale_data['time']} | ‚öñÔ∏è{sale_data['liters']}–ª\n"
                        f"üíµ {sale_data['total']}\n"
                        f"üîπ {sale_data['payment']}"
                    )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂: {e}")
            self.send_admin_alert(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂: {str(e)[:200]}")

    def get_payment_type(self, cell):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            icon = cell.find_element(By.CSS_SELECTOR, "svg").get_attribute("outerHTML")
            if 'coin' in icon.lower():
                return "ü™ô –ú–æ–Ω–µ—Ç—ã"
            elif 'bill' in icon.lower():
                return "üíµ –ö—É–ø—é—Ä—ã"
            elif 'card' in icon.lower():
                return "üí≥ –ö–∞—Ä—Ç–∞"
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        conn = sqlite3.connect('subscribers.db')
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id FROM subscribers")
            for (chat_id,) in cursor.fetchall():
                try:
                    bot.send_message(chat_id, message)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        finally:
            conn.close()

    def send_admin_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if ADMIN_CHAT_ID:
            try:
                bot.send_message(ADMIN_CHAT_ID, message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def run_monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = WaterMonitor()
    while True:
        try:
            monitor.check_sales()
            time.sleep(60)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(60)

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    with sqlite3.connect('subscribers.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS subscribers (
                chat_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    threading.Thread(target=bot.infinity_polling, daemon=True).start()
    run_monitor()
