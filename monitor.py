import os
import time
import logging
import sqlite3
import threading
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import telebot
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('water_monitor.log')
    ]
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
BASE_URL = 'https://my.alivewater.cloud/'
LOGIN = os.getenv('LOGIN')
PASSWORD = os.getenv('PASSWORD')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '')

if not all([BOT_TOKEN, LOGIN, PASSWORD]) or ':' not in BOT_TOKEN:
    logging.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN, LOGIN –∏ PASSWORD")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')

class WaterMonitor:
    def __init__(self):
        self.driver = self.setup_driver()
        self.last_sale = None
        self.session_active = False

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChromeDriver —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            options = Options()
            options.add_argument("--headless=new")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--window-size=1920,1080")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=options)
            driver.set_page_load_timeout(30)
            return driver
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            raise

    def login(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        for attempt in range(3):
            try:
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ #{attempt + 1}")
                self.driver.get(urljoin(BASE_URL, 'login'))
                time.sleep(2)

                # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
                login_field = WebDriverWait(self.driver, 15).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='login']"))
                )
                login_field.clear()
                login_field.send_keys(LOGIN)

                password_field = self.driver.find_element(By.CSS_SELECTOR, "input[name='password']")
                password_field.clear()
                password_field.send_keys(PASSWORD)

                # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
                submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
                submit_button.click()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                WebDriverWait(self.driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, "//*[contains(text(), '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å') or contains(text(), 'Welcome')]"))
                )
                self.session_active = True
                logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True

            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)[:200]}")
                if attempt < 2:
                    time.sleep(5)
                    try:
                        self.driver.refresh()
                    except:
                        self.driver = self.setup_driver()
                else:
                    logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                    return False

    def check_sales(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            if not self.session_active and not self.login():
                return

            self.driver.get(urljoin(BASE_URL, 'sales'))
            WebDriverWait(self.driver, 20).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "table._table_1s08q_1"))
            )

            rows = self.driver.find_elements(By.CSS_SELECTOR, "table._table_1s08q_1 tbody tr")
            if not rows:
                return

            first_row = rows[0]
            cells = first_row.find_elements(By.TAG_NAME, "td")
            if len(cells) < 6:
                return

            sale_data = {
                'number': cells[0].text.strip(),
                'address': cells[1].text.strip(),
                'time': cells[2].text.strip(),
                'liters': cells[3].text.strip(),
                'total': cells[4].text.strip(),
                'payment': self.get_payment_type(cells[5])
            }

            if not self.last_sale or sale_data['number'] != self.last_sale['number']:
                self.last_sale = sale_data
                self.send_alert(sale_data)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂: {e}")
            self.session_active = False

    def get_payment_type(self, cell):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            icon = cell.find_element(By.CSS_SELECTOR, "svg").get_attribute("outerHTML")
            if 'coin' in icon.lower():
                return "ü™ô –ú–æ–Ω–µ—Ç—ã"
            elif 'bill' in icon.lower():
                return "üíµ –ö—É–ø—é—Ä—ã"
            elif 'card' in icon.lower():
                return "üí≥ –ö–∞—Ä—Ç–∞"
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def send_alert(self, sale_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ"""
        message = (
            f"üí∞ <b>–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ #{sale_data['number']}</b>\n"
            f"üè† {sale_data['address']}\n"
            f"‚è∞ {sale_data['time']} | ‚öñÔ∏è{sale_data['liters']}–ª\n"
            f"üíµ {sale_data['total']}\n"
            f"üîπ {sale_data['payment']}"
        )
        
        conn = sqlite3.connect('subscribers.db')
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id FROM subscribers")
            for (chat_id,) in cursor.fetchall():
                try:
                    bot.send_message(chat_id, message)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        finally:
            conn.close()

def run_monitor():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = WaterMonitor()
    while True:
        try:
            monitor.check_sales()
            time.sleep(60)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(60)

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    with sqlite3.connect('subscribers.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS subscribers (
                chat_id INTEGER PRIMARY KEY,
                subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=bot.infinity_polling, daemon=True)
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    run_monitor()
