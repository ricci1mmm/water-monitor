import os
import time
import json
import logging
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import telebot
from urllib.parse import urljoin
from webdriver_manager.chrome import ChromeDriverManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
BASE_URL = 'https://my.alivewater.cloud/'
LOGIN = os.getenv('LOGIN')
PASSWORD = os.getenv('PASSWORD')
MAX_WAIT = 30
POLL_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
DATA_FILE = 'water_monitor_state.json'

bot = telebot.TeleBot(BOT_TOKEN)

class AliveWaterMonitor:
    def __init__(self):
        self.driver = None
        self.state = self.load_state()
        self.setup_driver()
        self.is_running = True

    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(DATA_FILE, 'r') as f:
                state = json.load(f)
                if 'last_problems' not in state:
                    state['last_problems'] = {}
                return state
        except (FileNotFoundError, json.JSONDecodeError):
            return {
                'last_sale_id': None,
                'last_problems': {},
                'last_check': None,
                'known_terminals': {}
            }

    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        with open(DATA_FILE, 'w') as f:
            json.dump(self.state, f, indent=2)

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--window-size=1200,800")
            
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.implicitly_wait(10)
            logging.info("–î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            raise

    def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            self.driver.get(urljoin(BASE_URL, 'login'))
            
            WebDriverWait(self.driver, MAX_WAIT).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            self.close_popups()
            
            # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
            login_field = WebDriverWait(self.driver, MAX_WAIT).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, "input[name='login']"))
            )
            login_field.clear()
            login_field.send_keys(LOGIN)
            
            password_field = self.driver.find_element(By.CSS_SELECTOR, "input[name='password']")
            password_field.clear()
            password_field.send_keys(PASSWORD)
            
            # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            submit_btn = WebDriverWait(self.driver, MAX_WAIT).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
            )
            submit_btn.click()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            WebDriverWait(self.driver, MAX_WAIT).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div.dashboard, div._container_iuuwv_1"))
            )
            logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            self.send_notification(f"üî¥ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)[:200]}")
            return False

    def close_popups(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω"""
        try:
            for _ in range(3):
                try:
                    popups = self.driver.find_elements(By.CSS_SELECTOR, "div.ant-modal-content")
                    for popup in popups:
                        try:
                            close_btn = popup.find_element(By.CSS_SELECTOR, "button.ant-modal-close")
                            if close_btn.is_displayed():
                                close_btn.click()
                                time.sleep(1)
                        except:
                            continue
                    
                    cookie_banners = self.driver.find_elements(By.CSS_SELECTOR, "div.cookie-banner, div.cookie-notice")
                    for banner in cookie_banners:
                        try:
                            accept_btn = banner.find_element(By.CSS_SELECTOR, "button.accept-cookies")
                            if accept_btn.is_displayed():
                                accept_btn.click()
                                time.sleep(0.5)
                        except:
                            continue
                    
                    self.driver.execute_script("""
                        document.querySelectorAll('div[aria-label="Close"], button.ant-modal-close').forEach(el => {
                            try { el.click(); } catch(e) {}
                        });
                    """)
                except:
                    pass
                
                time.sleep(1)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–æ–≤: {e}")

    def get_payment_method(self, cell):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –∏–∫–æ–Ω–∫–µ"""
        try:
            icons = cell.find_elements(By.CSS_SELECTOR, "svg")
            if not icons:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
            icon_html = icons[0].get_attribute("outerHTML")
            
            if 'd="M336 32c-48.6 0-92.6 9-124.5 23.4' in icon_html:
                return "–ú–æ–Ω–µ—Ç—ã"
            elif 'd="M528 32H48C21.5 32 0 53.5 0 80v352c0 26.5' in icon_html:
                return "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞"
            elif 'd="M320 144c-53.02 0-96 50.14-96 112 0 61.85' in icon_html:
                return "–ö—É–ø—é—Ä—ã"
            
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def check_sales(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂"""
        try:
            self.driver.get(urljoin(BASE_URL, 'sales'))
            WebDriverWait(self.driver, MAX_WAIT).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, "table._table_1s08q_1"))
            )
            
            time.sleep(3)
            self.close_popups()
            
            rows = self.driver.find_elements(By.CSS_SELECTOR, "table._table_1s08q_1 tbody tr")
            if not rows:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
                return

            new_sales = []
            for row in rows:
                try:
                    cells = row.find_elements(By.TAG_NAME, "td")
                    if len(cells) < 6:
                        continue
                        
                    sale_id = cells[0].text.strip()
                    
                    if sale_id == self.state.get('last_sale_id'):
                        break
                        
                    sale_data = {
                        'id': sale_id,
                        'address': cells[1].text.strip(),
                        'time': cells[2].text.strip(),
                        'liters': cells[3].text.strip(),
                        'total': cells[4].text.strip(),
                        'payment': self.get_payment_method(cells[5])
                    }
                    new_sales.append(sale_data)
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–¥–∞–∂–∏: {e}")

            for sale in reversed(new_sales):
                self.send_notification(
                    f"üí∞ –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ #{sale['id']}\n"
                    f"üè† –ê–¥—Ä–µ—Å: {sale['address']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {sale['time']}\n"
                    f"‚öñÔ∏è –û–±—ä–µ–º: {sale['liters']}\n"
                    f"üíµ –°—É–º–º–∞: {sale['total']}\n"
                    f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {sale['payment']}"
                )
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞: {sale['id']}")

            if new_sales:
                self.state['last_sale_id'] = new_sales[0]['id']
                self.save_state()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂: {e}")
            self.send_notification(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂: {str(e)[:200]}")

    def check_terminals(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤"""
        try:
            self.driver.get(urljoin(BASE_URL, 'terminals'))
            WebDriverWait(self.driver, MAX_WAIT).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, "table._table_1s08q_1"))
            )
            
            time.sleep(3)
            self.close_popups()
            
            current_problems = {}
            rows = self.driver.find_elements(By.CSS_SELECTOR, "tr._hasProblem_1gunj_20")
            
            for terminal in rows:
                try:
                    name = terminal.find_element(By.CSS_SELECTOR, "td:nth-child(2)").text.strip()
                    error_count = len(terminal.find_elements(By.CSS_SELECTOR, "span._error_irtpv_12"))
                    current_problems[name] = error_count
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}")

            last_problems = self.state.get('last_problems', {})
            
            for name, count in current_problems.items():
                if name not in last_problems or last_problems[name] < count:
                    self.send_notification(
                        f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º: {name}\n"
                        f"üî¥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {count}\n"
                        f"üîó –°—Å—ã–ª–∫–∞: {urljoin(BASE_URL, 'terminals')}"
                    )
            
            for name in list(last_problems.keys()):
                if name not in current_problems:
                    self.send_notification(
                        f"‚úÖ –¢–µ—Ä–º–∏–Ω–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {name}\n"
                        f"üü¢ –ü—Ä–æ–±–ª–µ–º—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã\n"
                        f"üîó –°—Å—ã–ª–∫–∞: {urljoin(BASE_URL, 'terminals')}"
                    )
            
            self.state['last_problems'] = current_problems
            self.save_state()
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤: {e}")
            self.send_notification("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤")

    def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            bot.send_message(CHAT_ID, message)
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def run_monitoring(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logging.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ AliveWater")
        
        while self.is_running:
            try:
                if not self.driver:
                    self.setup_driver()
                
                if not self.login():
                    time.sleep(60)
                    continue
                
                self.check_sales()
                self.check_terminals()
                
                self.state['last_check'] = datetime.now().isoformat()
                self.save_state()
                
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ {POLL_INTERVAL} —Å–µ–∫.")
                time.sleep(POLL_INTERVAL)
                
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                self.send_notification(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:200]}")
                
                if self.driver:
                    try:
                        self.driver.quit()
                    except:
                        pass
                    self.driver = None
                    time.sleep(10)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        if self.driver:
            try:
                self.driver.quit()
            except:
                pass

if __name__ == '__main__':
    monitor = AliveWaterMonitor()
    try:
        monitor.run_monitoring()
    except KeyboardInterrupt:
        monitor.stop()
        logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        monitor.stop()
        logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
